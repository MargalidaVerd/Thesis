---
title: "TFG"
author: "Margalida Verd Juli√†"
format: html
editor: visual
---

## Installing data and packages

First, we will install and load the necessary packages for this study. Additionally, we will load the required datasets. The analysis is based on three datasets:  

- **Mortality**: Downloaded from the World Health Organization, this is the primary dataset for the analysis. It contains the number of tuberculosis-related deaths in all countries. However, our study will focus solely on European countries.  

- **Population**: From this dataset, we will extract only the population variable. The source of this data is *Our World in Data*.  

- **GDP per capita**: Similar to the population dataset, we will extract only the *gdp_per_capita* variable. The source of this data is *Data Bank*.  

```{r, warning=FALSE, message=FALSE, echo= FALSE}

# packages loading

library(tidyverse)
library(readr)
library(dplyr)
library(zoo)
library(feasts)
library(eurostat)
library(leaflet)
library(sf)
library(scales)
library(cowplot)
library(ggthemes)
library(giscoR)
library(rnaturalearth)
library(ggplot2)
library(sf)
library(dplyr)
library(gridExtra)
library(tsibble)
library(tseries)
library(FinTS)
library(fable)


```

Let's examine the structure of the datasets:

1. Mortality: 

```{r, warning=FALSE, message=FALSE, echo= FALSE}

# data loading

mortality <- read.csv("mortality.csv", header = TRUE, colClasses = c("character","character","character","character","double","character","character","character","double","double","double","double"), row.names = NULL) 

colnames(mortality) <- colnames(mortality)[2:ncol(mortality)]
mortality <- mortality[1:(ncol(mortality)-1)]

mortality %>% 
  glimpse()
```
2. Population

```{r, warning=FALSE, message=FALSE, echo= FALSE}
population <- read.csv("population.csv", header = TRUE)

population %>% 
  glimpse()
```

3. gdp_per_capita

```{r, warning=FALSE, message=FALSE, echo= FALSE}
gdp_per_capita <- read.csv("gdp_per_capita.csv", header = TRUE)

gdp_per_capita %>% 
  glimpse()
```

## Cleaning data

As seen, we need to standardize the variables names to merge the tables. 

```{r, warning=FALSE, message=FALSE, echo= FALSE}
# renaming variables

print("Mortality")

mortality <- mortality %>%  
  rename(Number_Deaths = Number, Percent_CS_Death = Percentage.of.cause.specific.deaths.out.of.total.deaths, Age_Death_Rate = Age.standardized.death.rate.per.100.000.standard.population, Death_Rate = Death.rate.per.100.000.population, Country_Name = Country.Name,Country_Code = Country.Code, Region_Code = Region.Code, Region_Name = Region.Name) %>% 
  glimpse() 

print("Population")
population <- population %>% 
  rename(Population = Population...Sex..all...Age..all...Variant..estimates, Country_Name = Entity) %>% 
  glimpse() 

print("gdp_per_capita")
gdp_per_capita <- gdp_per_capita %>% 
  select(3,4,5,7) %>% 
  rename(Country_Name = Country.Name, Country_Code = Country.Code, Year = Time, GDP_capita = Value) %>% 
  glimpse()

```
The next step is to select the study variables from the mortality dataset. We will exclude `Sex`, `Age.group.code` and `Age.group`.


```{r, warning=FALSE, message=FALSE, echo= FALSE}
# Select rows of interest in the mortality dataset

mortality <- mortality %>% 
  dplyr::filter(Sex == "All") 

# Delete age variables

mortality <- mortality %>% 
  select(1:5,9:12) %>% 
  glimpse()
```

Now, we can merge the remaining two datasets.

```{r, warning=FALSE, message=FALSE, echo= FALSE}
# joins

total <- mortality %>% 
  left_join(population, by=c("Country_Name", "Year")) %>% 
  left_join(gdp_per_capita, by = c("Country_Code", "Year")) %>% 
  dplyr::filter(Region_Code=="EU") %>% 
  select(1:10,12) %>% 
  rename(Country_Name = Country_Name.x) 

total %>% 
  glimpse()

```

## Chosen countries

First, we will define the criteria for dividing European countries into six distinct regions: North, South, West, East, Central, and the Balkans. The Balkans have been designated as a separate region due to their significant cultural differences from neighboring countries. We will add a new variable to the dataset that specifies the subregion to which each country belongs.

```{r, warning=FALSE, message=FALSE, echo= FALSE}

total <- total %>%
  mutate(Subregion = case_when(
    Country_Name %in% c("Iceland", "Norway", "Sweden", "Finland", "Denmark") ~ "N",
    Country_Name %in% c("Spain", "Portugal", "Italy", "Malta", "Greece") ~ "S",
    Country_Name %in% c("Albania", "Bulgaria", "Romania", "Bosnia and Herzegovina", 
                "North Macedonia", "Croatia", "Serbia", "Montenegro", "Slovenia") ~ "B",
    Country_Name %in% c("France", "Netherlands", "Belgium", "United Kingdom", "Ireland") ~ "W",
    Country_Name %in% c("Russia", "Estonia", "Latvia", "Lithuania", "Belarus", "Ukraine", "Moldova") ~"E",
    Country_Name %in% c("Germany", "Poland", "Czechia", "Slovakia", "Hungary", 
                "Switzerland", "Austria", "Luxembourg") ~ "C" ,TRUE ~ NA_character_), .after = Region_Name)

```

The map below shows the division that would be used from this point forward.

```{r, warning=FALSE, message=FALSE, echo= FALSE}
# Load world map with country boundaries
world <- ne_countries(scale = "medium", returnclass = "sf")

# Filter only European countries
europe <- world %>% filter(continent == "Europe")


# Define the classification
europe <- europe %>%
  mutate(Subregion = case_when(
    name %in% c("Iceland", "Norway", "Sweden", "Finland", "Denmark") ~ "N",
    name %in% c("Spain", "Portugal", "Italy", "Malta", 
                 "Greece") ~ "S",
    name %in% c("Albania", "Bulgaria", "Romania", "Kosovo", "Bosnia and Herz.", 
                "North Macedonia", "Croatia", "Serbia", "Montenegro", "Slovenia") ~ "B",
    name %in% c("France", "Netherlands", "Belgium", "United Kingdom", "Ireland") ~ "W",
    name %in% c("Russia", "Estonia", "Latvia", "Lithuania", "Belarus", "Ukraine", "Moldova") ~ "E",
    name %in% c("Germany", "Poland", "Czechia", "Slovakia", "Hungary", 
                "Switzerland", "Austria", "Luxembourg") ~ "C",
  ))


ggplot(data = europe) +
  geom_sf(aes(fill = Subregion), color = "black") +
  scale_fill_manual(values = c(
    "N" = "#377EB8",    
    "S" = "#E41A1C",    
    "W" = "#4DAF4A",    
    "E" = "#FF7F00",   
    "C" = "#984EA3",    
    "B" = "#FFFF33"    
  )) + scale_x_continuous(limits = c(-20, 35)) +
  scale_y_continuous(limits = c(35, 70)) +
  theme_minimal() +
  labs(title = "Europe classification by subregion",
       fill = "Subregion") +
  theme(legend.position = "right")
```

We are considering Greece as part of the Southern region due to the cultural differences with the Balkan countries. Now, we would choose a country to represent each European subregion. We will select five European countries to analyze their trends in the number of tuberculosis-related deaths. The selection criteria will ensure that the chosen countries represent different regions of Europe (e.g., North, South, etc.) while also having a sufficient number of time observations to construct a reliable time series. Additionally, we aim to include countries that exhibit distinct trends in tuberculosis mortality, making the study more insightful by allowing for a comparative analysis and accurate forecasting of different patterns.

As a first step, we will address any missing values (NA) in the dataset for the variable Number_Deaths in each selected country. We are going to choose countries that at least have 40 years with data.

```{r, warning=FALSE, message=FALSE, echo= FALSE}

total %>% 
  dplyr::select(Country_Name, Number_Deaths) %>% 
  na.exclude() %>%  
  group_by(Country_Name) %>% 
  count() %>% 
  arrange(desc(n)) %>% 
  data.frame() %>% 
  filter(n >= 40)

```

Lets study each subregion:

-   **Southern Europe**. Due to the geographical origin of the authors, we will choose Spain as the representative country of this region.

-   **Northern Europe**. We observe that Iceland has 72 out of 74 years with recorded values for the selected variable, making it a suitable choice to represent the North region of Europe.

-   **Western Europe**. As Netherlands is the country with a greatest number of values, it would be our choice for this specific region.

-   **Eastern Europe**. It is noticeable that eastern countries are the ones with a less number of recorded values (most of them have only 40 or less); then, it would be a special region to analyse. Lithuania will represent the Northeast region, with 40 recorded values. Even though there are nearby countries with longer recorded periods, the tendency of Lithuania stands out among the rest, which will make for an interesting analysis.

-   **Central Europe**. Switzerland will be the representative country of the central region. It has 71 recorded values, that will fit perfectly when modeling the time series.

-   **Balkans region**. For the Balkans region, we have selected Romania, which has 60 recorded values. It will be an interesting case of analysis due to its tendency, that is a bit different as the other countries.

The selection criteria prioritize minimizing the number of missing values (NA) while ensuring a diverse representation of different regions in Europe. As we have discussed trends, let's display the trend in tuberculosis-related deaths for the selected countries.

```{r, warning=FALSE, message=FALSE, echo= FALSE}


chosen_countries <- total %>% 
  select(Country_Name, Year, Number_Deaths) 

chosen_countries %>% 
  filter(Country_Name %in% c( "Lithuania", "Iceland", "Netherlands", "Spain", "Romania", "Switzerland")) %>%  
  ggplot(aes(x = Year, y = Number_Deaths, color = Country_Name)) +  
  geom_line() +
  coord_cartesian(ylim = c(0,2700)) +
  scale_color_manual(values = c(
    "Spain" = "#E41A1C",
    "Iceland" = "#377EB8",   
    "Netherlands" = "#4DAF4A",    
    "Lithuania" = "#FF7F00",   
    "Switzerland" = "#984EA3",   
    "Romania" = "#FFFF33"
  )) + 
  theme_minimal() +
  labs(title = "Chosen countries tuberculosis-related deaths trends") +
  theme(legend.position = "right")


plot_spain <- chosen_countries %>% 
  filter(Country_Name == "Spain") %>%  
  ggplot(aes(x = Year, y = Number_Deaths)) +  
  geom_line() +
  labs(title = "Spain") 

plot_iceland <- chosen_countries %>% 
  filter(Country_Name == "Iceland") %>%  
  ggplot(aes(x = Year, y = Number_Deaths)) +  
  geom_line() +
  labs(title = "Iceland") 

plot_netherlands <- chosen_countries %>% 
  filter(Country_Name == "Netherlands") %>%  
  ggplot(aes(x = Year, y = Number_Deaths)) +  
  geom_line() +
  labs(title = "Netherlands") 

plot_romania <- chosen_countries %>% 
  filter(Country_Name == "Romania") %>%  
  ggplot(aes(x = Year, y = Number_Deaths)) +  
  geom_line() +
  labs(title = "Romania") 

plot_lithuania <- chosen_countries %>% 
  filter(Country_Name == "Lithuania") %>%  
  ggplot(aes(x = Year, y = Number_Deaths)) +  
  geom_line() +
  labs(title = "Lithuania") 


plot_switzerland <- chosen_countries %>% 
  filter(Country_Name == "Switzerland") %>%  
  ggplot(aes(x = Year, y = Number_Deaths)) +  
  geom_line() +
  labs(title = "Switzerland") 


grid.arrange(plot_spain, plot_switzerland, plot_iceland, plot_lithuania, plot_romania, plot_netherlands, nrow = 3)

```


## Detrending series


As we saw in the previous section, developed countries exhibit a noticeable downward trend. To apply an ARIMA model, it is essential to work with a stationary time series, meaning data should not have any trend. The goal now is to detrend those series (Spain, Iceland, Netherlands and Switzerland).

$The following regression model was applied:

$$\ln(Number\_Deaths)= \ln(\beta_0)-\beta_1 \cdot \text{Year} + \ln(u_t),$$
where $u_t$ represents the residuals term. We will use the function `lm` for the regression. We begin our study with Spain data. The estimated coefficients are as follows:

```{r, warning=FALSE, message=FALSE, echo= FALSE}

# Spain 

spain_data <- total %>% 
  filter(Country_Name == "Spain") %>% 
  select(Year, Number_Deaths)


modSpain <- lm(log(Number_Deaths)~Year, data=spain_data)
summary(modSpain)

```
- Intercept: p-value < $2.2e-16$ indicates it is a significant baseline value.
- Year coefficient $\beta_1$: p-value < $2.2e-16$ suggests a statistically significant decreasing trend in tuberculosis mortality over time.

Notice that the model's high $R$-squared value indicates that the linear trend explains approximately the $98.3\%$ of the variace in the logarithm data, confirming a strong fit.

Now, we plot the residuals of the serie.

```{r, warning=FALSE, message=FALSE, echo= FALSE}

residSpain <- residuals(modSpain)
plot(as.ts(residSpain))

```

Upon examining the residuals plot of the linear regression model, it becomes evident that the residuals do not follow a normal distribution. This deviation suggests that the model has not fully captured the underlying patterns of the data, and there may still be some autocorrelation or temporal dependencies present in the residuals.

To further investigate this, we will plot the autocorrelation function (ACF) and partial autocorrelation function (PACF) of the residuals. These plots will help us determine whether there are any significant correlations at specific lags, indicating the presence of autocorrelation that was not accounted for in the linear regression model.

```{r, warning=FALSE, message=FALSE, echo= FALSE}

par(mfrow=c(2,2))
acf(residSpain)
pacf(residSpain)

```
The PACF plot reveals that the first lag is significantly different from zero, indicating that there is a strong correlation between the residual at time $t$ and the residual at time $t‚àí1$. This suggests that the residuals exhibit autocorrelation at this lag, meaning that the error at one time point is related to the error at the previous time point.

We are going to adjust an ARIMA model to the residuals using the `auto.arima` function.

```{r, warning=FALSE, message=FALSE, echo= FALSE}
forecast::auto.arima(residSpain)
```

We can model the Spain data residuals with an ARIMA of order $(0,1,1)$. So, the regression for Spain time serie is as follows:

$$\ln(Number\_Deaths) = \ln(\beta_0)-\beta_1 \cdot \text{Year} + \ln(u_t),$$
where $z_t= \ln(u_t)$ follows an ARIMA(0,1,1).

We can do the same for the remaining countries. 

*Netherlands*

```{r, warning=FALSE, message=FALSE, echo= FALSE}

netherlands_data <- total %>% 
  filter(Country_Name == "Netherlands") %>% 
  select(Year, Number_Deaths) 

modNeth <- lm(log(Number_Deaths)~Year, data=netherlands_data)
summary(modNeth)

```

```{r, warning=FALSE, message=FALSE, echo= FALSE}
residNeth <- residuals(modNeth)
plot(as.ts(residNeth))

```

```{r, warning=FALSE, message=FALSE, echo= FALSE}

par(mfrow=c(2,2))
acf(residNeth)
pacf(residNeth)

```

```{r, warning=FALSE, message=FALSE, echo= FALSE}

forecast::auto.arima(residNeth)
```

*Switzerland*

```{r, warning=FALSE, message=FALSE, echo= FALSE}

switzerland_data <- total %>% 
  filter(Country_Name == "Switzerland") %>% 
  select(Year, Number_Deaths) 

modSwitz <- lm(log(Number_Deaths)~Year, data=switzerland_data)
summary(modSwitz)

```
Let's check the residuals:

```{r, warning=FALSE, message=FALSE, echo= FALSE}
residSwitz <- residuals(modSwitz)
plot(as.ts(residSwitz))

par(mfrow=c(2,2))
acf(residSwitz)
pacf(residSwitz)
```

To assure the results, we are going to prove the normality and homoscedasticity using Saphiro test and ARCH test:


```{r, warning=FALSE, message=FALSE, echo= FALSE}
modSwitz %>% forecast::checkresiduals(test = F)
shapiro.test(residSwitz)
```


```{r, warning=FALSE, message=FALSE, echo= FALSE}
residSwitz %>% FinTS::ArchTest()
```

There is no evidence of ARCH effects, so we can proceed with the study.

*Iceland*

PROBLEMA: No podem aplicar log a Iceland perque te valors de ND = 0.

```{r, warning=FALSE, message=FALSE, echo= FALSE}

#iceland_data <- total %>% 
  #filter(Country_Name == "Iceland") %>% 
  #select(Year, Number_Deaths) 

#modIce <- lm(log(Number_Deaths)~Year, data=iceland_data)
#summary(modIce)

```

## Stationary series analysis

*Spain*

```{r, warning=FALSE, message=FALSE, echo= FALSE}
spain_data <- as_tsibble(spain_data,index = Year)

spain_trend <- spain_data %>% 
  model(exponential = TSLM(log(Number_Deaths)~ trend()))

spain_trends <- spain_trend |> forecast(h = 15)

spain_data |>
  autoplot(Number_Deaths) +
  geom_line(data = fitted(spain_trend),
            aes(y = .fitted, colour = .model)) +
  autolayer(spain_trends, alpha = 0.5, level = 95)
```

*Switzerland*

```{r, warning=FALSE, message=FALSE, echo= FALSE}
switzerland_data <- as_tsibble(switzerland_data,index = Year)

switzerland_trend <- switzerland_data %>% 
  model(exponential = TSLM(log(Number_Deaths)~ trend()))

switzerland_trends <- switzerland_trend |> forecast(h = 15)

switzerland_data |>
  autoplot(Number_Deaths) +
  geom_line(data = fitted(switzerland_trend),
            aes(y = .fitted, colour = .model)) +
  autolayer(switzerland_trends, alpha = 0.5, level = 95)
```

*Netherlands*

```{r, warning=FALSE, message=FALSE, echo= FALSE}
netherlands_data <- as_tsibble(netherlands_data,index = Year)

netherlands_trend <- netherlands_data %>% 
  model(exponential = TSLM(log(Number_Deaths)~ trend()))

netherlands_trends <- netherlands_trend |> forecast(h = 15)

netherlands_data |>
  autoplot(Number_Deaths) +
  geom_line(data = fitted(netherlands_trend),
            aes(y = .fitted, colour = .model)) +
  autolayer(netherlands_trends, alpha = 0.5, level = 95)
```

